<?php
define('CITIES_VOCABULARY_NAME', 'city');
define('CITIES_PREFIX', 'city_');
define('CITIES_GN_USERNAME', 'cities_gn_username');

/**
 * Implements hook_menu().
 */
function cities_menu() {
  $city = taxonomy_vocabulary_machine_name_load(CITIES_VOCABULARY_NAME);

  $items['admin/structure/taxonomy/%cities_vocabulary/search'] = array(
    'title' => 'City Search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cities_search_form'),
    'access callback' => 'cities_access',
    'access arguments' => array($city->vid, 'create'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/regional/cities'] = array(
    'title' => 'Cities',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cities_config_form'),
    'access callback' => 'cities_access',
    'access arguments' => array($city->vid, 'create'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['cities/search/select'] = array(
    'title' => 'City Search AJAX callback',
    'page callback' => 'cities_search_select',
    'page arguments' => array(1),
    'access callback' => 'cities_access',
    'access arguments' => array($city->vid, 'create'),
    'expanded' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['cities/nojs/add/%'] = array(
    'title' => 'Add a city from GeoNames to the city vocabulary',
    'page callback' => 'cities_city_add',
    'page arguments' => array(1, 3),
    'access callback' => 'cities_access',
    'access arguments' => array($city->vid, 'create'),
    'expanded' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['cities/ajax/add/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['cities/nojs/add/%'];

  return $items;
}

/**
 * Implements hook_taxonomy_term_delete().
 *
 * Remove the row from our tracking table, when a term is deleted
 * from our vocabulary, so that they can re-add it again, later, if they need.
*/
function cities_taxonomy_term_delete($term) {
  $vocabulary = taxonomy_vocabulary_load($term->vid);
  if ($vocabulary->machine_name == CITIES_VOCABULARY_NAME) {
    db_delete('cities')->condition('tid', $term->tid)->execute();
  }
}

/**
 * Deny access to this tab on the listing of all vocabularies except "city".
 * We do this because it doesn't make sense to show the tab on other vocabularies.
 */
function cities_vocabulary_load($wildcard) {
  return ($wildcard == CITIES_VOCABULARY_NAME) ? TRUE : FALSE;
}

/**
 * Access callback.
 */
function cities_access($vid, $action) {
  return TRUE;
}

/**
 * Config form.
 */
function cities_config_form($form, &$form_state) {
  $form[CITIES_GN_USERNAME] = array(
    '#title' => t('GeoNames Username'),
    '#description' => t('A GeoNames username.  This account must have "free web services access enabled." (See :link.)',
      array(':link' => 'http://www.geonames.org/manageaccount',)
    ),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get(CITIES_GN_USERNAME, ''),
  );

  return system_settings_form($form);
}


/**
 * Search page form callback.
 */
function cities_search_form($form, &$form_state) {
  $form['search'] = array(
    '#prefix' => '<div id="city-search">',
    '#suffix' => '</div>',
  );

  $form['search']['city'] = array(
    '#title' => t('City Search'),
    '#description' => t('Enter a city name (or part of one) to search for in the GeoNames database.'),
    '#type' => 'textfield',
  );

  if (module_exists('countries')) {
    $form['search']['country'] = array(
      '#type' => 'country',
      '#title' => t('Filter by Country'),
      '#filters' => array(
        'enabled' => COUNTRIES_ENABLED,
      ),

    );
  }

  $form['search']['submit'] = array(
    '#value' => t('Search'),
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'cities_search_select',
      'wrapper' => 'city-search-results',
      'method' => 'replace',
      'effect' => 'fade',
      'event' => 'click',
    ),
  );

  $form['search']['results'] = array(
    '#type' => 'fieldset',
    '#title' => t('City Search Results'),
    '#prefix' => '<div id="city-search-results">',
    '#suffix' => '</div>',
  );

  return $form;
}

/**
 * Search result form callback function.
 */
function cities_search_select(&$form, &$form_state) {
  if (!empty($form_state['input']['city'])) {
    $username = variable_get(CITIES_GN_USERNAME, '');
    if (empty($username)) {
      return t('You must <a href="/admin/config/regional/cities">configure your GeoNames username</a> before using the "City Search" function.');
    }

    $url_query = array(
      'name' => check_plain($form_state['input']['city']),
      'featureClass' => 'P',
      'username' => $username,
    );
    !empty($form_state['input']['country']) && $url_query['country'] = $form_state['input']['country'];

    $query_url = url('http://api.geonames.org/searchJSON', array('query' => $url_query));

    // Add the users current language
    $results = drupal_http_request($query_url);
    $results = drupal_json_decode($results->data);

    // Find cities that already exist in the vocabulary, to display a "View" link
    // rather than an "Add" link
    $query = "SELECT gnid FROM {cities}";
    $existing_cities = db_query($query)->fetchCol();

    $results_table = array(
      'header' => array(
        t('City'),
        t('Country'),
        t('Coordinates (lat, long)'),
        t('Operations'),
      ),
      'rows' => array(),
      'attributes' => array(
        'id' => 'city-search-results',
      ),
      'colgroups' => array(),
      'sticky' => array(),
      'caption' => '',
      'empty' => t('Your search returned 0 results.'),
    );

    foreach ($results['geonames'] as $geoname) {
      $operations = in_array($geoname['geonameId'], $existing_cities)
        ? t('<a href="/city/!iso2/!name" target="_city">View</a>', array('!iso2' => strtolower($geoname['countryCode']), '!name' => strtolower($geoname['name'])))
        : t('<a href="/cities/nojs/add/!geoname_id" class="use-ajax">Add</a>', array('!geoname_id' => $geoname['geonameId']));
      $results_table['rows'][] = array(
        'data' => array(
          $geoname['name'],
          $geoname['countryName'],
          t(' <a href="https://www.google.com/maps/place/!lat,!long" target="_cities_map" title="View these coordinates on Google Maps (opens in a new window/tab).">!lat, !long</a>',
            array('!lat' => $geoname['lat'], '!long' => $geoname['lng'])
          ),
          $operations,
        ),
        'id' => $geoname['geonameId'],
      );
    }

    return theme_table($results_table);
  }
  else {
    return t('Please enter a city name to search for.');
  }
}

/**
 * AJAX callback to add a city.
 */
function cities_city_add($ajax, $geoname_id) {
  // Fetch full data for this item in site's default language
  $url_query = array(
    'geonameId' => $geoname_id,
    'style' => 'FULL',
    'lang' => language_default('language'),
    'username' => variable_get(CITIES_GN_USERNAME),
  );
  $query_url = url('http://api.geonames.org/get', array('query' => $url_query));
  $response = drupal_http_request($query_url);
  $results_object = simplexml_load_string($response->data);
  $results = (array) $results_object;

  if (count($results)) {
    global $user;
    $vocabulary = taxonomy_vocabulary_machine_name_load(CITIES_VOCABULARY_NAME);
    $city = array(
      'name' => $results['name'],
      'vid' => $vocabulary->vid,
    );
    $city[CITIES_PREFIX .'latitude'][LANGUAGE_NONE][0]['value'] = $results['lat'];
    $city[CITIES_PREFIX .'longitude'][LANGUAGE_NONE][0]['value'] = $results['lng'];
    $city[CITIES_PREFIX .'timezone'][LANGUAGE_NONE][0]['value'] = $results['timezone'];

    if (module_exists('countries') && module_exists('entityreference')) {
      $country = country_load($results['countryCode']);
      $city[CITIES_PREFIX . 'country'][LANGUAGE_NONE][0]['target_id'] =  $country->cid;
    }
    else {
      $cities[CITIES_PREFIX . 'country'][LANGUAGE_NONE][0]['value'] = $results['countryCode'];
    }

    $city = (object) $city;
    taxonomy_term_save($city);

    // If i18n_taxonomy is enabled, save a translation of every enabled language
    if (module_exists('i18n_taxonomy')) {
      $query = "SELECT lid FROM {locales_source} WHERE location = :location";
      $lid = db_query($query, array(':location' => 'taxonomy:term:' . $city->tid . ':name'))->fetchCol();

      $languages = language_list('enabled');
      foreach ($languages[1] as $language => $object) {
        $translation = $results_object->xpath('//geoname/alternateName[@lang="' . substr($language, 0, 2) . '"]');
        db_merge('locales_target')
          ->key(
            array(
              'lid'      => $lid[0],
              'language' => $language,
            )
          )
           ->fields(
             array(
               'lid'         => $lid[0],
               'language'    => $language,
               'translation' => (string) $translation[0],
               'i18n_status' => 1
           )
         )->execute();
      }
    }

    // Add a record in "cities" table for preventing dupes
    //$query = "INSERT INTO {cities} (gnid, tid) VALUES (:gnid, :tid)";
    $tracker = db_insert('cities')
      ->fields(array(
        'gnid' => $geoname_id,
        'tid' => $city->tid,
       ))
      ->execute();

  }
  if ($ajax) {
    return array(
      '#type' => 'ajax',
      '#commands' => array(
        ajax_command_remove('tr#' . $geoname_id),
      ),
    );
  }
}

